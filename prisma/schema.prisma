generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  cart       Cart? //relacion de una a uno con Cart 
  orders     Order[]
  role       Role     @default(USER)
  created_at DateTime @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[] //Relacion con CartItems
  createdAt DateTime   @default(now())
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  description    String? // Agregamos el campo de descripción opcional para los productos
  price          Int             @default(99)
  stock          Int             @default(1)
  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     Int
  items          OrderItem[] //relacion con la tabla OrderItem
  cartItems      CartItem[]
  discountItems  Discount[]
  invoiceDetails InvoiceDetail[]
  createAt       DateTime        @default(now())
}

model Category {
  id             Int        @id @default(autoincrement())
  name           String     @unique
  description    String? // Agregamos el campo de descripción opcional para las categorías
  products       Product[]
  discountsItemd Discount[]
  createdAt      DateTime   @default(now())
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  invoice     Invoice[]
  totalAmount Float       @default(0)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int //Esta es la llave foranea hacia la tabla de order
  product   Product  @relation(fields: [productId], references: [id])
  productId Int //esta es la llave foranea a la tabla de product
  quantity  Int //cantidad de productos en la orden
  price     Float // precio del producto al momento de la compra
  createAt  DateTime @default(now())
}

model Invoice {
  id             Int             @id @default(autoincrement())
  order          Order           @relation(fields: [orderId], references: [id])
  orderId        Int
  invoiceNumber  String
  totalAmount    Float
  invoiceDetails InvoiceDetail[]
  createdAt      DateTime        @default(now())
}

model InvoiceDetail {
  id        Int     @id @default(autoincrement())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Discount {
  id          Int       @id @default(autoincrement())
  code        String    @unique //codigo del cupon
  description String? //description del descuento
  percentage  Float //Porcentaje de descuento(ej. 10.0 para 10%)
  product     Product?  @relation(fields: [productId], references: [id])
  productId   Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  startDate   DateTime //fecha de inicio del descuento
  endDate     DateTime //fecha de fin del descuento
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

enum Role {
  USER
  ADMIN
}
